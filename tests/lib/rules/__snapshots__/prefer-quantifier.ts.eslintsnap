# eslint-snapshot-rule-tester format: v1


Test: prefer-quantifier >> invalid
Code:
  1 | /\d\d/
    |  ^~~~ [1]

Output:
  1 | /\d{2}/

[1] Unexpected consecutive same character class escapes. Use '{2}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 | /  /
    |  ^~ [1]

Output:
  1 | / {2}/

[1] Unexpected consecutive same characters. Use '{2}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 | /  /v
    |  ^~ [1]

Output:
  1 | / {2}/v

[1] Unexpected consecutive same characters. Use '{2}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 | /\p{ASCII}\p{ASCII}/u
    |  ^~~~~~~~~~~~~~~~~~ [1]

Output:
  1 | /\p{ASCII}{2}/u

[1] Unexpected consecutive same character class escapes. Use '{2}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 | /\p{Basic_Emoji}\p{Basic_Emoji}/v
    |  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [1]

Output:
  1 | /\p{Basic_Emoji}{2}/v

[1] Unexpected consecutive same character class escapes. Use '{2}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 | /(\d\d\d*)/
    |   ^~~~ [1]

Output:
  1 | /(\d{2}\d*)/

[1] Unexpected consecutive same character class escapes. Use '{2}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 | /\d\d\d\d-\d\d-\d\d/
    |  ^~~~~~~~ ^~~~ ^~~~
    |  [1]      [2]  [3]

Output:
  1 | /\d{4}-\d{2}-\d{2}/

[1] Unexpected consecutive same character class escapes. Use '{4}' instead.
[2] Unexpected consecutive same character class escapes. Use '{2}' instead.
[3] Unexpected consecutive same character class escapes. Use '{2}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 | /aaa..\s\s\S\S\p{ASCII}\p{ASCII}/u
    |  ^~~ [1]  ^~~~ [4]
    |     ^~ [2]    ^~~~~~~~~~~~~~~~~~ [5]
    |       ^~~~ [3]

Output:
  1 | /a{3}.{2}\s{2}\S{2}\p{ASCII}{2}/u

[1] Unexpected consecutive same characters. Use '{3}' instead.
[2] Unexpected consecutive same any characters. Use '{2}' instead.
[3] Unexpected consecutive same character class escapes. Use '{2}' instead.
[4] Unexpected consecutive same character class escapes. Use '{2}' instead.
[5] Unexpected consecutive same character class escapes. Use '{2}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 | /aaaa(aaa)/u
    |  ^~~~ ^~~
    |  [1]  [2]

Output:
  1 | /a{4}(a{3})/u

[1] Unexpected consecutive same characters. Use '{4}' instead.
[2] Unexpected consecutive same characters. Use '{3}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 | /(b)?aaaa(b)?/u
    |      ^~~~ [1]

Output:
  1 | /(b)?a{4}(b)?/u

[1] Unexpected consecutive same characters. Use '{4}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 |
  2 |             const s = "\\d\\d"
    |                        ^~~~~~ [1]
  3 |             new RegExp(s)
  4 |             

Output:
  1 |
  2 |             const s = "\\d{2}"
  3 |             new RegExp(s)
  4 |             

[1] Unexpected consecutive same character class escapes. Use '{2}' instead.
---


Test: prefer-quantifier >> invalid
Code:
  1 |
  2 |             const s = "\\d"+"\\d"
    |                       ^~~~~~~~~~~ [1]
  3 |             new RegExp(s)
  4 |             

Output: unchanged

[1] Unexpected consecutive same character class escapes. Use '{2}' instead.
---

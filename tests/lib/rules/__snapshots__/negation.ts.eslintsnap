# eslint-snapshot-rule-tester format: v1


Test: negation >> invalid
Code:
  1 | /[^\d]/
    |  ^~~~~ [1]

Output:
  1 | /\D/

[1] Unexpected negated character class. Use '\D' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\D]/
    |  ^~~~~ [1]

Output:
  1 | /\d/

[1] Unexpected negated character class. Use '\d' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\w]/
    |  ^~~~~ [1]

Output:
  1 | /\W/

[1] Unexpected negated character class. Use '\W' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\W]/
    |  ^~~~~ [1]

Output:
  1 | /\w/

[1] Unexpected negated character class. Use '\w' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\s]/
    |  ^~~~~ [1]

Output:
  1 | /\S/

[1] Unexpected negated character class. Use '\S' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\S]/
    |  ^~~~~ [1]

Output:
  1 | /\s/

[1] Unexpected negated character class. Use '\s' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\p{ASCII}]/u
    |  ^~~~~~~~~~~~ [1]

Output:
  1 | /\P{ASCII}/u

[1] Unexpected negated character class. Use '\P{ASCII}' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\P{ASCII}]/u
    |  ^~~~~~~~~~~~ [1]

Output:
  1 | /\p{ASCII}/u

[1] Unexpected negated character class. Use '\p{ASCII}' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\p{Script=Hiragana}]/u
    |  ^~~~~~~~~~~~~~~~~~~~~~ [1]

Output:
  1 | /\P{Script=Hiragana}/u

[1] Unexpected negated character class. Use '\P{Script=Hiragana}' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\P{Script=Hiragana}]/u
    |  ^~~~~~~~~~~~~~~~~~~~~~ [1]

Output:
  1 | /\p{Script=Hiragana}/u

[1] Unexpected negated character class. Use '\p{Script=Hiragana}' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\P{Ll}]/u;
    |  ^~~~~~~~~ [1]

Output:
  1 | /\p{Ll}/u;

[1] Unexpected negated character class. Use '\p{Ll}' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\P{White_Space}]/iu;
    |  ^~~~~~~~~~~~~~~~~~ [1]

Output:
  1 | /\p{White_Space}/iu;

[1] Unexpected negated character class. Use '\p{White_Space}' instead.
---


Test: negation >> invalid
Code:
  1 | const s ="[^\\w]"
    |           ^~~~~~ [1]
  2 |             new RegExp(s)

Output:
  1 | const s ="\\W"
  2 |             new RegExp(s)

[1] Unexpected negated character class. Use '\W' instead.
---


Test: negation >> invalid
Code:
  1 | const s ="[^\\w]"
  2 |             new RegExp(s)
    |                        ^ [1]
  3 |             new RegExp(s)
    |                        ^ [2]

Output: unchanged

[1] Unexpected negated character class. Use '\W' instead.
[2] Unexpected negated character class. Use '\W' instead.
---


Test: negation >> invalid
Code:
  1 | const s ="[^\\w]"
  2 |             new RegExp(s, "i")
    |                        ^ [1]
  3 |             new RegExp(s)
    |                        ^ [2]

Output: unchanged

[1] Unexpected negated character class. Use '\W' instead.
[2] Unexpected negated character class. Use '\W' instead.
---


Test: negation >> invalid
Code:
  1 | const s ="[^\\w]"
  2 |             Number(s)
  3 |             new RegExp(s)
    |                        ^ [1]

Output: unchanged

[1] Unexpected negated character class. Use '\W' instead.
---


Test: negation >> invalid
Code:
  1 | /[^\P{Lowercase_Letter}]/iv
    |  ^~~~~~~~~~~~~~~~~~~~~~~ [1]

Output:
  1 | /\p{Lowercase_Letter}/iv

[1] Unexpected negated character class. Use '\p{Lowercase_Letter}' instead.
---


Test: negation >> invalid
Code:
  1 | /[^[^abc]]/v
    |  ^~~~~~~~~ [1]

Output:
  1 | /[abc]/v

[1] Unexpected negated character class. Use '[abc]' instead.
---


Test: negation >> invalid
Code:
  1 | /[^[^\q{a|1|A}&&\w]]/v
    |  ^~~~~~~~~~~~~~~~~~~ [1]

Output:
  1 | /[\q{a|1|A}&&\w]/v

[1] Unexpected negated character class. Use '[\q{a|1|A}&&\w]' instead.
---


Test: negation >> invalid
Code:
  1 | /[^[^a]]/iv
    |  ^~~~~~~ [1]

Output:
  1 | /[a]/iv

[1] Unexpected negated character class. Use '[a]' instead.
---


Test: negation >> invalid
Code:
  1 | /[^[^\P{Lowercase_Letter}]]/iv
    |  ^~~~~~~~~~~~~~~~~~~~~~~~~~ [1]
    |    ^~~~~~~~~~~~~~~~~~~~~~~ [2]

Output:
  1 | /[\P{Lowercase_Letter}]/iv

[1] Unexpected negated character class. Use '[\P{Lowercase_Letter}]' instead.
[2] Unexpected negated character class. Use '\p{Lowercase_Letter}' instead.
---


Test: negation >> invalid
Code:
  1 | /[^[^[\p{Lowercase_Letter}&&[ABC]]]]/iv
    |  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [1]

Output:
  1 | /[[\p{Lowercase_Letter}&&[ABC]]]/iv

[1] Unexpected negated character class. Use '[[\p{Lowercase_Letter}&&[ABC]]]' instead.
---


Test: negation >> invalid
Code:
  1 | /[^[^[\p{Lowercase_Letter}&&A]--B]]/iv
    |  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [1]

Output:
  1 | /[[\p{Lowercase_Letter}&&A]--B]/iv

[1] Unexpected negated character class. Use '[[\p{Lowercase_Letter}&&A]--B]' instead.
---

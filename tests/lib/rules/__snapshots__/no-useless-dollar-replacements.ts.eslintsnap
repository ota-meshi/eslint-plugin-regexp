# eslint-snapshot-rule-tester format: v1


Test: no-useless-dollar-replacements >> invalid
Code:
  1 |
  2 |             const str = 'John Smith';
  3 |
  4 |             /* âœ— BAD */
  5 |             var newStr = str.replace(/(\w+)\s(\w+)/, '$3, $1 $2');
    |                                                       ^~ [1]
  6 |             // newStr = '$3, John Smith'
  7 |             var newStr = str.replace(/(?<first>\w+)\s(?<last>\w+)/, '$<last>, $<first> $<middle>');
    |                                                                                        ^~~~~~~~~ [2]
  8 |             // newStr = 'Smith, John '
  9 |             

[1] '$3' replacement will insert '$3' because there are less than 3 capturing groups. Use '$$' if you want to escape '$'.
[2] '$<middle>' replacement will be ignored because the named capturing group is not found. Use '$$' if you want to escape '$'.
---


Test: no-useless-dollar-replacements >> invalid
Code:
  1 |
  2 |             const str = 'John Smith';
  3 |             var newStr = str.replace(/(\w+)\s(\w+)/, '$03, $01 $02');
    |                                                       ^~~ [1]
  4 |             

[1] '$03' replacement will insert '$03' because there are less than 3 capturing groups. Use '$$' if you want to escape '$'.
---


Test: no-useless-dollar-replacements >> invalid
Code:
  1 |
  2 |             "abc".replaceAll(/()()(()())()()(.)/g, '$9'); // "$9$9$9"
    |                                                     ^~ [1]
  3 |             

[1] '$9' replacement will insert '$9' because there are less than 9 capturing groups. Use '$$' if you want to escape '$'.
---


Test: no-useless-dollar-replacements >> invalid
Code:
  1 |
  2 |             "abc".replaceAll(/()()(()())()()(.)/g, '$09'); // "$09$09$09"
    |                                                     ^~~ [1]
  3 |             

[1] '$09' replacement will insert '$09' because there are less than 9 capturing groups. Use '$$' if you want to escape '$'.
---


Test: no-useless-dollar-replacements >> invalid
Code:
  1 |
  2 |             const regexp = /./g
  3 |             "abc".replaceAll(regexp, '$1');
    |                                       ^~ [1]
  4 |             

[1] '$1' replacement will insert '$1' because capturing group does not found. Use '$$' if you want to escape '$'.
---


Test: no-useless-dollar-replacements >> invalid
Code:
  1 |
  2 |             "abc".replaceAll(/(.)/g, '$<a>');
    |                                       ^~~~ [1]
  3 |             

[1] '$<a>' replacement will insert '$<a>' because named capturing group does not found. Use '$$' if you want to escape '$'.
---


Test: no-useless-dollar-replacements >> invalid
Code:
  1 |
  2 |             const str = 'John Smith';
  3 |             var newStr = str.replace(/([[\w]]+)[\s](\w+)/v, '$3, $1 $2');
    |                                                              ^~ [1]
  4 |             

[1] '$3' replacement will insert '$3' because there are less than 3 capturing groups. Use '$$' if you want to escape '$'.
---
